type Token @entity {
  id: ID!
  owner: User!
  tokenID: BigInt!
  tokenURI: String!
  externalURL: String!
  lits: BigInt!
  drops: BigInt!
  ipfsHashURI: TokenMetadata
  updatedAtTimestamp: BigInt
}

type TokenMetadata @entity {
  id: ID!
  name: String!
  image: String!
  description: String!
  traitType0: String!
  value0: String!
  traitType1: String!
  value1: String!
  traitType2: String!
  value2: String!
  traitType3: String!
  value3: String!
  traitType4: String!
  value4: String!
}

type User @entity {
  id: ID!
  address: Bytes!
  token: Token! @derivedFrom(field: "owner")
}

type _Schema_
  @fulltext(
    name: "OnlyRoastSearch"
    language: en
    algorithm: rank
    include: [
      {
        entity: "TokenMetadata"
        fields: [
          { name: "name" }
          { name: "description" }
          { name: "value0" }
          { name: "value1" }
        ]
      }
    ]
  )

type DropAdded @entity(immutable: true) {
  id: Bytes!
  user: Bytes! # address
  tokenId: BigInt! # uint256
  newDropCount: BigInt! # uint256
  timestamp: BigInt! # uint256
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}

type LitAdded @entity(immutable: true) {
  id: Bytes!
  user: Bytes! # address
  tokenId: BigInt! # uint256
  newLitCount: BigInt! # uint256
  timestamp: BigInt! # uint256
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}

type MetadataUpdate @entity(immutable: true) {
  id: Bytes!
  _tokenId: BigInt! # uint256
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}

type TokenMinted @entity(immutable: true) {
  id: Bytes!
  to: Bytes! # address
  tokenId: BigInt! # uint256
  uri: String! # string
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}

type Transfer @entity(immutable: true) {
  id: Bytes!
  from: Bytes! # address
  to: Bytes! # address
  tokenId: BigInt! # uint256
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}
